"""Initial schema

Revision ID: 15715f86a411
Revises:
Create Date: 2025-07-07 21:11:52.620095

"""
from typing import Sequence, Union

import sqlalchemy as sa

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "15715f86a411"
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "block_metrics",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("timestamp", sa.DateTime(), nullable=False),
        sa.Column("block_number", sa.BigInteger(), nullable=False),
        sa.Column("block_timestamp", sa.DateTime(), nullable=False),
        sa.Column("gas_used", sa.BigInteger(), nullable=False),
        sa.Column("gas_limit", sa.BigInteger(), nullable=False),
        sa.Column("transaction_count", sa.Integer(), nullable=False),
        sa.Column("base_fee_per_gas", sa.BigInteger(), nullable=True),
        sa.Column("difficulty", sa.BigInteger(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "idx_block_metrics_block_timestamp",
        "block_metrics",
        ["block_timestamp"],
        unique=False,
    )
    op.create_index(
        "idx_block_metrics_timestamp", "block_metrics", ["timestamp"], unique=False
    )
    op.create_index(
        op.f("ix_block_metrics_block_number"),
        "block_metrics",
        ["block_number"],
        unique=True,
    )
    op.create_table(
        "gas_metrics",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("timestamp", sa.DateTime(), nullable=False),
        sa.Column("gas_price_wei", sa.BigInteger(), nullable=False),
        sa.Column("gas_price_gwei", sa.Float(), nullable=False),
        sa.Column("pending_transactions", sa.Integer(), nullable=True),
        sa.Column("gas_price_p25", sa.Float(), nullable=True),
        sa.Column("gas_price_p50", sa.Float(), nullable=True),
        sa.Column("gas_price_p75", sa.Float(), nullable=True),
        sa.Column("gas_price_p95", sa.Float(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_gas_metrics_timestamp"), "gas_metrics", ["timestamp"], unique=False
    )
    op.create_table(
        "mempool_metrics",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("timestamp", sa.DateTime(), nullable=False),
        sa.Column("pending_count", sa.Integer(), nullable=False),
        sa.Column("avg_gas_price_gwei", sa.Float(), nullable=True),
        sa.Column("min_gas_price_gwei", sa.Float(), nullable=True),
        sa.Column("max_gas_price_gwei", sa.Float(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_mempool_metrics_timestamp"),
        "mempool_metrics",
        ["timestamp"],
        unique=False,
    )
    op.create_table(
        "network_health_scores",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("timestamp", sa.DateTime(), nullable=False),
        sa.Column("overall_score", sa.Float(), nullable=False),
        sa.Column("gas_score", sa.Float(), nullable=False),
        sa.Column("congestion_score", sa.Float(), nullable=False),
        sa.Column("block_time_score", sa.Float(), nullable=False),
        sa.Column("calculation_version", sa.String(length=50), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_network_health_scores_timestamp"),
        "network_health_scores",
        ["timestamp"],
        unique=False,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(
        op.f("ix_network_health_scores_timestamp"), table_name="network_health_scores"
    )
    op.drop_table("network_health_scores")
    op.drop_index(op.f("ix_mempool_metrics_timestamp"), table_name="mempool_metrics")
    op.drop_table("mempool_metrics")
    op.drop_index(op.f("ix_gas_metrics_timestamp"), table_name="gas_metrics")
    op.drop_table("gas_metrics")
    op.drop_index(op.f("ix_block_metrics_block_number"), table_name="block_metrics")
    op.drop_index("idx_block_metrics_timestamp", table_name="block_metrics")
    op.drop_index("idx_block_metrics_block_timestamp", table_name="block_metrics")
    op.drop_table("block_metrics")
    # ### end Alembic commands ###
