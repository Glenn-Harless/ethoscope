"""Add MEV and L2 metrics tables

Revision ID: 63d4ee1bb89b
Revises: 15715f86a411
Create Date: 2025-07-08 21:07:33.969514

"""
from typing import Sequence, Union

import sqlalchemy as sa

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "63d4ee1bb89b"
down_revision: Union[str, Sequence[str], None] = "15715f86a411"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "mev_block_analysis",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("timestamp", sa.DateTime(), nullable=False),
        sa.Column("block_number", sa.BigInteger(), nullable=False),
        sa.Column("slot", sa.BigInteger(), nullable=False),
        sa.Column("mev_intensity", sa.String(length=20), nullable=True),
        sa.Column("value_eth", sa.Float(), nullable=True),
        sa.Column("gas_efficiency", sa.Float(), nullable=True),
        sa.Column("builder_pubkey", sa.String(length=100), nullable=True),
        sa.Column("likely_mev_type", sa.String(length=50), nullable=True),
        sa.Column("relay_source", sa.String(length=50), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "idx_mev_block_analysis_intensity",
        "mev_block_analysis",
        ["mev_intensity"],
        unique=False,
    )
    op.create_index(
        "idx_mev_block_analysis_timestamp_block",
        "mev_block_analysis",
        ["timestamp", "block_number"],
        unique=False,
    )
    op.create_index(
        "idx_mev_block_analysis_type",
        "mev_block_analysis",
        ["likely_mev_type"],
        unique=False,
    )
    op.create_index(
        op.f("ix_mev_block_analysis_block_number"),
        "mev_block_analysis",
        ["block_number"],
        unique=False,
    )
    op.create_index(
        op.f("ix_mev_block_analysis_timestamp"),
        "mev_block_analysis",
        ["timestamp"],
        unique=False,
    )
    op.create_table(
        "mev_boost_stats",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("timestamp", sa.DateTime(), nullable=False),
        sa.Column("total_mev_revenue_eth", sa.Float(), nullable=True),
        sa.Column("average_block_value_eth", sa.Float(), nullable=True),
        sa.Column("block_count", sa.Integer(), nullable=True),
        sa.Column("top_builder", sa.String(length=100), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_mev_boost_stats_timestamp"),
        "mev_boost_stats",
        ["timestamp"],
        unique=False,
    )
    op.create_table(
        "mev_metrics",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("timestamp", sa.DateTime(), nullable=False),
        sa.Column("block_number", sa.BigInteger(), nullable=False),
        sa.Column("slot", sa.BigInteger(), nullable=False),
        sa.Column("total_mev_revenue", sa.Float(), nullable=True),
        sa.Column("builder_pubkey", sa.String(length=100), nullable=True),
        sa.Column("proposer_fee_recipient", sa.String(length=42), nullable=True),
        sa.Column("gas_used", sa.BigInteger(), nullable=True),
        sa.Column("gas_limit", sa.BigInteger(), nullable=True),
        sa.Column("gas_utilization", sa.Float(), nullable=True),
        sa.Column("relay_source", sa.String(length=50), nullable=True),
        sa.Column("block_hash", sa.String(length=66), nullable=True),
        sa.Column("parent_hash", sa.String(length=66), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "idx_mev_metrics_builder", "mev_metrics", ["builder_pubkey"], unique=False
    )
    op.create_index("idx_mev_metrics_slot", "mev_metrics", ["slot"], unique=False)
    op.create_index(
        "idx_mev_metrics_timestamp_block",
        "mev_metrics",
        ["timestamp", "block_number"],
        unique=False,
    )
    op.create_index(
        op.f("ix_mev_metrics_block_number"),
        "mev_metrics",
        ["block_number"],
        unique=False,
    )
    op.create_index(op.f("ix_mev_metrics_slot"), "mev_metrics", ["slot"], unique=False)
    op.create_index(
        op.f("ix_mev_metrics_timestamp"), "mev_metrics", ["timestamp"], unique=False
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_mev_metrics_timestamp"), table_name="mev_metrics")
    op.drop_index(op.f("ix_mev_metrics_slot"), table_name="mev_metrics")
    op.drop_index(op.f("ix_mev_metrics_block_number"), table_name="mev_metrics")
    op.drop_index("idx_mev_metrics_timestamp_block", table_name="mev_metrics")
    op.drop_index("idx_mev_metrics_slot", table_name="mev_metrics")
    op.drop_index("idx_mev_metrics_builder", table_name="mev_metrics")
    op.drop_table("mev_metrics")
    op.drop_index(op.f("ix_mev_boost_stats_timestamp"), table_name="mev_boost_stats")
    op.drop_table("mev_boost_stats")
    op.drop_index(
        op.f("ix_mev_block_analysis_timestamp"), table_name="mev_block_analysis"
    )
    op.drop_index(
        op.f("ix_mev_block_analysis_block_number"), table_name="mev_block_analysis"
    )
    op.drop_index("idx_mev_block_analysis_type", table_name="mev_block_analysis")
    op.drop_index(
        "idx_mev_block_analysis_timestamp_block", table_name="mev_block_analysis"
    )
    op.drop_index("idx_mev_block_analysis_intensity", table_name="mev_block_analysis")
    op.drop_table("mev_block_analysis")
    # ### end Alembic commands ###
